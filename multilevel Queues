#include<stdio.h>
#include<iostream>
using namespace std;
void result();
struct Processes
{
	int processid;
	int priority;
	int burstT;
	int arrival;
};
int main()
{
	int i,y,j,k[3];
	cout<<"Range of priority\t\tLimits\n";
	cout<<"Lowest priority range\t\t1-10\t\t(FIFO)\n";
	cout<<"Middle priority range\t\t11-20\t\t(Priority Sheduling)\n";
	cout<<"Highest priority range\t\t21-30\t\t(Round Robin Sheduling Time quantam=4)\n\n";
	cout<<"NOTE: CPU cant be idle and Highest priority for 1 and least priority for 30\n\n";
	int n;
	cout<<"Enter how many Process do you want :";
	cin>>n;
	int p[n],burst[n],arr[n];
	struct Processes obj1[n],obj2[n],obj3[n];
	for(int i=0;i<n;i++)
	{
		cout<<"\nProcess ID : "<<(i+1)<<",Enter Priority of process :";
		cin>>p[i];
		cout<<"Enter Burst Time of process :";
		cin>>burst[i];
		cout<<"Enter Arrival Time of process :";
		cin>>arr[i];
	}
	k[1]=0;k[2]=0;k[3]=0;
	for(int i=0;i<n;i++)
	{
		 if(p[i]<=10&&p[i]>0)
		      { 
			  obj1[k[1]].processid=i+1;
		      obj1[k[1]].priority=p[i];
		      obj1[k[1]].burstT=burst[i];
		      obj1[k[1]].arrival=arr[i];
			  k[1]++;
			  }
		 else if(p[i]>=11&&p[i]<=20) 
		      {
			  obj2[k[2]].processid=i+1; 
		      obj2[k[2]].priority=p[i];
		      obj2[k[2]].burstT=burst[i];
		      obj2[k[2]].arrival=arr[i];
		      k[2]++;
			  }
		 else if(p[i]>=21&&p[i]<=30) 
		      {
			  obj3[k[3]].processid=i+1; 
		      obj3[k[3]].priority=p[i];
		      obj3[k[3]].burstT=burst[i];
		      obj3[k[3]].arrival=arr[i];
		      k[3]++;
			  }     
	}
	cout<<arr[0];
	cout<<"\nQ1---Lowest priority range Queue ("<<k[1]<<" Process)\t(FIFO)\n";
	if(k[1]==0)
		cout<<"No process in this priority range 0-5\n\n";
	else
	{
		cout<<"PID | Priority | Arrival Time | Burst Time\n";
	    for(int j=0;j<k[1];j++)
		{
		 	cout<<obj1[j].processid<<"\t"<<obj1[j].priority<<"\t\t"<<obj1[j].arrival<<"\t"<<obj1[j].burstT<<"\n";
		}
    }
	cout<<"\nQ2---Middle priority range Queue ("<<k[2]<<" process)\t(Priority Sheduling)\n";
	if(k[2]==0)
	    cout<<"No process in this priority range 5-10\n\n";
	else
	{
	    cout<<"PID | Priority | Arrival Time | Burst Time\n";
		for(int j=0;j<k[2];j++)
	    {
		 	 cout<<obj2[j].processid<<"\t"<<obj2[j].priority<<"\t\t"<<obj2[j].arrival<<"\t"<<obj2[j].burstT<<"\n";
		}
	} 
	cout<<"\nQ3---Highest priority range Queue  ("<<k[3]<<" process) (Round Robin scheduling)\n";
	if(k[3]==0)
		cout<<"No process in this priority range 10-15"<<endl<<endl;
    else
    {
		cout<<"PID | Priority | Arrival Time | Burst Time"<<endl;
		for(int j=0;j<k[3];j++)
		 {
		 	 cout<<obj3[j].processid<<"\t"<<obj3[j].priority<<"\t\t"<<obj3[j].arrival<<"\t"<<obj3[j].burstT<<"\n";
		}	
	}  
	int o=0;
	int m,t=0,imp=0,Queuecount=0,Qsize=0,flag[k[1]],flag1[k[2]],flag2[k[3]];
	int Q[3];
	 for(int m=0;m<3;m++)
    {  
	    Q[m]=1;
    }
    for(int m=0;m<k[1];m++)
    {  
	    flag[m]=1;
    }
    for(int m=0;m<k[2];m++)
    {  
	    flag1[m]=1;
    }
    for(int m=0;m<k[3];m++)
    {  
	    flag2[m]=1;
    }
    struct Processes c;
		    	for(int u=0;u<k[2];u++)
		    	{
		    		for(int r=u;r<k[2];r++)
		    		{
		    		if(obj2[u].priority>obj2[r].priority)
		    		{
		    			c=obj2[u];
		    			obj2[u]=obj2[r];
		    			obj2[r]=c;
		    		}
				  }
				}
    struct Processes c1;
	for(int u=0;u<k[1];u++)
	{
		for(int r=u;r<k[1];r++)
		{
		    if(obj1[u].arrival>obj1[r].arrival)
		    {
		    	c1=obj1[u];
		    	obj1[u]=obj1[r];
		    	obj1[r]=c1;
		    }
		}
	}
	struct Processes c2;
		    	for(int u=0;u<k[3];u++)
		    	{
		    		        for(int r=u;r<k[3];r++)
		    		        {
		    		          if(obj3[u].arrival>obj3[r].arrival)
		    		           {
		    		            	c2=obj3[u];
		    		            	obj3[u]=obj3[r];
		    		            	obj3[r]=c2;
		    		         }
				             }
				}	
						
	cout<<"\n\nSHEDULING :\n\n";
	while(t<=100)
	{		
    if(Q[imp]==0)
	{
		for(int m=0;m<3;m++)
	    {
	        if(Q[m]==0)
		    {
		   	    Queuecount++;
		    }
	    }
        	if(Queuecount==3)
	        { 
	            break;
	            break;
	        }  
	        }
  else{
	switch(imp)
	{
		case 0:
		    {
		    	int count=0;	
        	    int pro=0;
        	    int e=t+10;
        	    if(k[1]==0){
        	    	Q[0]=0;
        	    	break;
			    }
        	  else{
           	  while(t<=e)
	          {		
	              if(flag[pro]==0)
				  {
		          for(int m=0;m<k[1];m++)
	              {
	        	         if(flag[m]==0)
		                 {
		   	                    count++;
		                 }
	              }
        	      if(count==k[1])
	              { 
	                     Q[0]=0; 
	                     break;
	              }  
	              }
	              else
	              {	
	                   if(obj1[pro].arrival<=t)
	                   {
					   int QTime=10;
             		   int remtime=obj1[pro].burstT;
             		   if((t+remtime)>e && remtime>0)
             		   {
             		   	  int h=t+remtime;
					      remtime=h-e;
						  obj1[pro].burstT=remtime;		   
             		   	  cout<<"\tQ1\tp"<<obj1[pro].processid<<" process from "<<t<<"---"<<e<<"\n";
             		   	  t=e;
             		   	  break;
						}
             		    else if(remtime<10)
					   {
					     cout<<"\tQ1\tp"<<obj1[pro].processid<<" process from "<<t<<"---"<<(t+remtime)<<"\n";
					     flag[pro]=0;
					     t+=remtime;
					     obj1[pro].burstT=0;
					   }
					   else if(remtime>10)
					   {
					   	  cout<<"\tQ1\tp"<<obj1[pro].processid<<" process from "<<t<<"---"<<(t+10)<<"\n";
					   	  t=t+10;
					      obj1[pro].burstT-=10;
					   }    
             		  }
    					pro++;
    					pro=pro%k[1];
    					
    			   }	
				}
		     }
			break;	
		    }
	    case 1:
		    {
		    	
		    	int count=0;
		    	 int e=t+10;
        	  int pro1=0;
        	  if(k[2]==0){
        	  	Q[1]=0;
			  }
        	  else{
           	  while(t<=e)
	          {		
	              if(flag1[pro1]==0)
				  {
		          for(int m=0;m<k[2];m++)
	              {
	        	         if(flag1[m]==0)
		                 {
		   	                    count++;
		                 }
	              }
        	      if(count==k[2])
	              { 
	                     Q[1]=0; 
	                     break;
	                     break;
	              }  
	              }
	              else
	              {	
	                  if(obj2[pro1].arrival<=t)
	                   {
	                  int QTime=10;
             		   int remtime=obj2[pro1].burstT;
             		   if(t+remtime>e && remtime>0)
             		   {
             		   	  int h=t+remtime;
					      remtime=h-e;
						  obj2[pro1].burstT=remtime;		   
             		   	  cout<<"\tQ2\tp"<<obj2[pro1].processid<<" process from "<<t<<"---"<<e<<"\n";
             		   	  t=e;
             		   	  break;
             		   	
						}
             		   
					   else if(remtime<=10)
					   {
					     cout<<"\tQ2\tp"<<obj2[pro1].processid<<" process from "<<t<<"---"<<(t+remtime)<<"\n";
					     flag1[pro1]=0;
					     t+=remtime;
					     obj1[pro1].burstT=0;
					   }
					   else if(remtime>10)
					   {
					   	  cout<<"\tQ2\tp"<<obj2[pro1].processid<<" process from "<<t<<"---"<<(t+10)<<"\n";
					      obj2[pro1].burstT-=10;
					      t=t+10;
					   }    	    
	              
	              }}
    					pro1++;
    					pro1=pro1%k[2];
    		        	}	
			         }  
			        break;
		     }
		case 2:
			{
			  int count=0;	
         	  int e=t+10;
        	  int pro2=0;
        	  if(k[3]==0){
        	  	Q[2]=0;
			  }
        	  else{
           	  while(t<=e)
	          {		
	              if(flag2[pro2]==0)
				  {
		          for(int m=0;m<k[3];m++)
	              {
	        	         if(flag2[m]==0)
		                 {
		   	                    count++;
		                 }
	              }
        	      if(count==k[3])
	              { 
	                     Q[2]=0;
	                     break;
	                     break;
	               }  
	              }
	              else
	              {	
	                    if(obj3[pro2].arrival<=t)
	                   { 
             			int timeq=4;
	            		int remtime=obj3[pro2].burstT;   
	            		if((t+remtime)>e && remtime>0 && remtime<=4)
	          			{  
	                 		int h=t+remtime;
	                 		remtime=h-e; 
	                 		obj3[pro2].burstT=remtime;
	                 		cout<<"\tQ3\tp"<<obj3[pro2].processid<<" process from "<<t<<"---"<<e<<"\n";
	                 		t=e;
	                  		break;
	           			}    
	           			else if(remtime<=timeq)
	            		{   	 
	                    	cout<<"\tQ3\tp"<<obj3[pro2].processid<<" process from "<<t<<"---"<<(t+remtime)<<"\n";
	                    	t+=remtime;
	                    	obj3[pro2].burstT=0;
		                	flag2[pro2]=0;
	            		}
	                    else
	  					{	
	   						 cout<<"\tQ3\tp"<<obj3[pro2].processid<<" process from "<<t<<"---"<<(t+timeq)<<"\n";
	     					 obj3[pro2].burstT-=timeq;
	     					 t+=timeq;
       					}
                        }}
    					pro2++;
    					pro2=pro2%k[3];
    			}
			} 
			break;
			}
            
		
	}
   
     }     
imp++;
imp=imp%3;
}
cout<<"END;";
return 0;
}
